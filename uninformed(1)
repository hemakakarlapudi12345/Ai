import networkx as nx
import matplotlib.pyplot as plt

# Creating the graph
G = nx.Graph()

# Adding edges with weights
edges = [
    ('A', 'B', 7), ('A', 'C', 9), ('A', 'F', 14),
    ('B', 'C', 10), ('B', 'D', 15),
    ('C', 'D', 11), ('C', 'F', 2), ('C', 'E', 9),
    ('D', 'E', 6), ('E', 'F', 9)
]

G.add_weighted_edges_from(edges)

# Problem 1: Shortest Path using Dijkstra's Algorithm
def shortest_path_dijkstra(graph, start, end):
    path = nx.dijkstra_path(graph, start, end)
    length = nx.dijkstra_path_length(graph, start, end)
    return path, length

path, length = shortest_path_dijkstra(G, 'A', 'D')
print("Shortest path from A to D:", path, "with total weight:", length)

# Problem 2: BFS Implementation
def bfs(graph, start):
    visited = []
    queue = [start]
    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.append(node)
            queue.extend(set(graph[node]) - set(visited))
    return visited

print("BFS Traversal from A:", bfs(G, 'A'))

# Problem 3: DFS Implementation
def dfs(graph, start, visited=None):
    if visited is None:
        visited = []
    visited.append(start)
    for neighbor in graph[start]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)
    return visited

print("DFS Traversal from A:", dfs(G, 'A'))

# Problem 4: Cycle Detection using DFS
def has_cycle(graph):
    try:
        cycle = nx.find_cycle(graph, orientation='original')
        return True, cycle
    except nx.NetworkXNoCycle:
        return False, []

cycle_exists, cycle_path = has_cycle(G)
print("Cycle exists in the graph:", cycle_exists)
if cycle_exists:
    print("Cycle Path:", cycle_path)

# Problem 5: Graph Coloring using Greedy Algorithm
def graph_coloring(graph):
    coloring = nx.coloring.greedy_color(graph, strategy="largest_first")
    return coloring

coloring = graph_coloring(G)
print("Graph Coloring:", coloring)

# Visualizing the graph with colors
color_map = ['red', 'blue', 'green']
nodes_color = [color_map[coloring[node] % 3] for node in G.nodes()]
nx.draw(G, with_labels=True, node_color=nodes_color, node_size=800, font_weight='bold')
plt.show()
