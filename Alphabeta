import math
def alpha_beta_pruning(node, depth, alpha, beta, maximizing_player, tree):
    if depth == 0 or node not in tree:
        return node
    if maximizing_player:
        max_eval = -math.inf
        for child in tree[node]:
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, False, tree)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break  
        return max_eval
    else:
        min_eval = math.inf
        for child in tree[node]:
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, True, tree)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break  
        return min_eval
tree = {
    'A': ['B1', 'B2', 'B3'],
    'B1': [12, 10, 3],
    'B2': [5, 8, 10],
    'B3': [11, 2, 12]
}
result = alpha_beta_pruning('A', 2, -math.inf, math.inf, True, tree)
print("Optimal Value:", result)
