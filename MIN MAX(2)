class GameTree:
    def __init__(self, value=None, children=None):
        self.value = value
        self.children = children or []
def minimax(node, depth, is_max_player):
    if not node.children:
        return node.value, node
    if is_max_player:
        max_eval = float('-inf')
        best_child = None
        for child in node.children:
            eval_score, _ = minimax(child, depth - 1, False)
            if eval_score is not None and eval_score > max_eval:
                max_eval = eval_score
                best_child = child
        return max_eval, best_child
    else:
        min_eval = float('inf')
        best_child = None
        for child in node.children:
            eval_score, _ = minimax(child, depth - 1, True)
            if eval_score is not None and eval_score < min_eval:
                min_eval = eval_score
                best_child = child
        return min_eval, best_child
def build_game_tree():
    # Leaf nodes
    leaf_nodes = [
        GameTree(5), GameTree(-1), GameTree(4),
        GameTree(3), GameTree(-2), GameTree(-5),
        GameTree(9), GameTree(8), 
        GameTree(6), GameTree(1), GameTree(-4), 
        GameTree(2), GameTree(4), GameTree(7), GameTree(3), GameTree(-3)
    ]
    mid_level_nodes = [
        GameTree(-1, [leaf_nodes[0], leaf_nodes[1]]),    
        GameTree(3, [leaf_nodes[2], leaf_nodes[3]]),    
        GameTree(-5, [leaf_nodes[4], leaf_nodes[5]]),    
        GameTree(8, [leaf_nodes[6], leaf_nodes[7]]),    
        GameTree(1, [leaf_nodes[8], leaf_nodes[9]]),   
        GameTree(-4, [leaf_nodes[10], leaf_nodes[11]]),  
        GameTree(4, [leaf_nodes[12], leaf_nodes[13]]), 
        GameTree(-3, [leaf_nodes[14], leaf_nodes[15]])  
    ]
    upper_level_nodes = [
        GameTree(3, [mid_level_nodes[0], mid_level_nodes[1]]),
        GameTree(8, [mid_level_nodes[2], mid_level_nodes[3]]),
        GameTree(1, [mid_level_nodes[4], mid_level_nodes[5]]),
        GameTree(4, [mid_level_nodes[6], mid_level_nodes[7]])
    ]
    root = GameTree(3, [
        GameTree(3, [upper_level_nodes[0], upper_level_nodes[1]]),
        GameTree(1, [upper_level_nodes[2], upper_level_nodes[3]])
    ])
    return root
def trace_optimal_path(root):
    path = []
    current_node = root
    is_max_player = True
    while current_node.children:
        _, current_node = minimax(current_node, float('inf'), is_max_player)
        path.append(current_node.value)
        is_max_player = not is_max_player
    return path
game_tree = build_game_tree()
optimal_path = trace_optimal_path(game_tree)
print("Optimal Path:", optimal_path)
