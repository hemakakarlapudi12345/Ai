import heapq
def uniform_cost_search(graph, start, goal):
    priority_queue = [(0, start)] 
    visited = set()
    while priority_queue:
        cost, node = heapq.heappop(priority_queue)
        
        if node in visited:
            continue
        visited.add(node)

        if node == goal:
            return cost  
        
        for neighbor, edge_cost in graph.get(node, []):
            if neighbor not in visited:
                heapq.heappush(priority_queue, (cost + edge_cost, neighbor))
    
    return float("inf")  
graph = {
    0: [(1, 3), (3, 8), (4, 7)],
    1: [(0, 3), (2, 1), (3, 4)],
    2: [(1, 1), (3, 2)],
    3: [(0, 8), (1, 4), (2, 2), (4, 3)],
    4: [(0, 7), (3, 3)]
}
ucs_cost = uniform_cost_search(graph, 0, 2)
print(f"Uniform Cost Search - Minimum cost from 0 to 2: {ucs_cost}")
