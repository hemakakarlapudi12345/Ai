from collections import deque

def bidirectional_search(graph, start, goal):
    """Perform Bidirectional Search and return the shortest path and cost"""
    if start == goal:
        return [start], 0

    # Queues for forward and backward search
    forward_queue = deque([(start, [start], 0)])  # (node, path, cost)
    backward_queue = deque([(goal, [goal], 0)])  # (node, path, cost)

    # Parent tracking
    forward_visited = {start: (None, 0)}
    backward_visited = {goal: (None, 0)}

    while forward_queue and backward_queue:
        # Expand forward
        path, cost, meeting_point = expand_search(graph, forward_queue, forward_visited, backward_visited)
        if meeting_point:
            return construct_final_path(forward_visited, backward_visited, meeting_point), cost

        # Expand backward
        path, cost, meeting_point = expand_search(graph, backward_queue, backward_visited, forward_visited)
        if meeting_point:
            return construct_final_path(forward_visited, backward_visited, meeting_point), cost

    return [], float("inf")  # No path found

def expand_search(graph, queue, visited, opposite_visited):
    """Expand search step in one direction"""
    node, path, cost = queue.popleft()

    for neighbor, edge_cost in graph.get(node, []):
        new_cost = cost + edge_cost
        if neighbor not in visited:
            visited[neighbor] = (node, new_cost)
            queue.append((neighbor, path + [neighbor], new_cost))

            if neighbor in opposite_visited:
                return path, new_cost + opposite_visited[neighbor][1], neighbor  # Meeting point found

    return None, None, None  # Continue searching

def construct_final_path(forward_visited, backward_visited, meeting_point):
    """Reconstruct the shortest path using meeting point"""
    path = []

    # Forward direction
    node = meeting_point
    while node is not None:
        path.append(node)
        node = forward_visited[node][0]
    path.reverse()

    # Backward direction
    node = backward_visited[meeting_point][0]
    while node is not None:
        path.append(node)
        node = backward_visited[node][0]
    
    return path

# Graph Representation: {Node: [(Neighbor, Cost), ...]}
graph = {
    0: [(1, 3), (3, 8), (4, 7)],
    1: [(0, 3), (2, 1), (3, 4)],
    2: [(1, 1), (3, 2)],
    3: [(0, 8), (1, 4), (2, 2), (4, 3)],
    4: [(0, 7), (3, 3)]
}

# Run Bidirectional Search from source (0) to target (2)
bidir_path, bidir_cost = bidirectional_search(graph, 0, 2)
print(f"Bidirectional Search - Path: {bidir_path}")
print(f"Bidirectional Search - cost: {bidir_cost}")
