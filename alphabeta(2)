import math
def alpha_beta_pruning(node, depth, alpha, beta, maximizing_player, tree):
    if depth == 0 or node not in tree:
        return node 
    if maximizing_player:
        max_eval = -math.inf
        for child in tree[node]:
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, False, tree)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break  
        return max_eval
    else:
        min_eval = math.inf
        for child in tree[node]:
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, True, tree)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break  
        return min_eval
tree = {
    3: [3, 1],
    3: [3, 8, 1],
    1: [1, 4, -3],
    3: [-1, 3, -5],
    8: [8, 1, -4],
    1: [2, 4, 7],
    4: [3, -3],
    -1: [5, -1, 4],
    3: [3, -2],
    -5: [-5, 9],
    8: [8, 6],
    1: [1, -4],
    -4: [2, 4],
    4: [7, 3],
    -3: [-3]
}
result = alpha_beta_pruning(3, 3, -math.inf, math.inf, True, tree)
print("Optimal Value:", result)
