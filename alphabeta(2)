class GameTree:
    def __init__(self, value, children=None):
        self.value = value
        self.children = children if children else []

def alpha_beta_pruning(node, alpha, beta, maximizing_player, path=None, pruned_nodes=None):
    if path is None:
        path = []
    if pruned_nodes is None:
        pruned_nodes = []

    if not node.children:  # Leaf node
        return node.value, path + [node.value], pruned_nodes

    if maximizing_player:
        max_eval = float('-inf')
        best_path = []
        for child in node.children:
            eval_value, child_path, _ = alpha_beta_pruning(child, alpha, beta, False, path + [node.value], pruned_nodes)
            if eval_value > max_eval:
                max_eval = eval_value
                best_path = child_path
            alpha = max(alpha, eval_value)
            if beta <= alpha:  # Pruning condition
                pruned_nodes.extend([c.value for c in node.children[node.children.index(child) + 1:]])
                break
        return max_eval, best_path, pruned_nodes

    else:  # Minimizing player
        min_eval = float('inf')
        best_path = []
        for child in node.children:
            eval_value, child_path, _ = alpha_beta_pruning(child, alpha, beta, True, path + [node.value], pruned_nodes)
            if eval_value < min_eval:
                min_eval = eval_value
                best_path = child_path
            beta = min(beta, eval_value)
            if beta <= alpha:  # Pruning condition
                pruned_nodes.extend([c.value for c in node.children[node.children.index(child) + 1:]])
                break
        return min_eval, best_path, pruned_nodes

# Construct the GameTree
leaf_nodes = [GameTree(val) for val in [5, -1, 4, 3, -2, -5, 9, 8, 6, 1, -4, 2, 4, 7, 3, -3]]

mid_level_nodes = [
    GameTree(-1, [leaf_nodes[0], leaf_nodes[1]]),
    GameTree(3, [leaf_nodes[2], leaf_nodes[3]]),
    GameTree(-5, [leaf_nodes[4], leaf_nodes[5]]),
    GameTree(8, [leaf_nodes[6], leaf_nodes[7]]),
    GameTree(1, [leaf_nodes[8], leaf_nodes[9]]),
    GameTree(-4, [leaf_nodes[10], leaf_nodes[11]]),
    GameTree(4, [leaf_nodes[12], leaf_nodes[13]]),
    GameTree(-3, [leaf_nodes[14], leaf_nodes[15]])
]

upper_level_nodes = [
    GameTree(3, [mid_level_nodes[0], mid_level_nodes[1]]),
    GameTree(8, [mid_level_nodes[2], mid_level_nodes[3]]),
    GameTree(1, [mid_level_nodes[4], mid_level_nodes[5]]),
    GameTree(4, [mid_level_nodes[6], mid_level_nodes[7]])
]

root = GameTree(3, [
    GameTree(3, [upper_level_nodes[0], upper_level_nodes[1]]),
    GameTree(1, [upper_level_nodes[2], upper_level_nodes[3]])
])

# Run Alpha-Beta Pruning
optimal_value, optimal_path, pruned_nodes = alpha_beta_pruning(root, float('-inf'), float('inf'), True)

# Print Results
print("Optimal Value:", optimal_value)
print("Optimal Path:", " â†’ ".join(map(str, optimal_path)))
print("Pruned Nodes:", ", ".join(map(str, pruned_nodes)) if pruned_nodes else "None")

