import random

# Number of individuals in each generation
POPULATION_SIZE = 100

# Valid genes
GENES = '''abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOP
QRSTUVWXYZ 1234567890, .-;:_!"#%&/()=?@${[]}'''

# Target string to be generated
TARGET = "Hema"

class Individual:
    '''
    Class representing individual in population
    '''
    def __init__(self, chromosome):
        self.chromosome = chromosome
        self.fitness = self.cal_fitness()

    @classmethod
    def mutated_gene(cls):
        '''
        Create random gene for mutation
        '''
        return random.choice(GENES)

    @classmethod
    def create_gnome(cls):
        '''
        Create chromosome or string of genes
        '''
        return [cls.mutated_gene() for _ in range(len(TARGET))]

    def mate(self, partner):
        '''
        Perform crossover with another individual
        '''
        child_chromosome = []
        for gp1, gp2 in zip(self.chromosome, partner.chromosome):
            prob = random.random()
            if prob < 0.5:
                child_chromosome.append(gp1)
            else:
                child_chromosome.append(gp2)
        return Individual(child_chromosome)

    def mutate(self):
        '''
        Perform mutation on an individual
        '''
        self.chromosome[random.randint(0, len(self.chromosome) - 1)] = self.mutated_gene()
        self.fitness = self.cal_fitness()

    def cal_fitness(self):
        '''
        Calculate fitness score
        '''
        return sum(1 for gs, gt in zip(self.chromosome, TARGET) if gs != gt)

def initialize_population():
    '''
    Generate initial population
    '''
    return [Individual(Individual.create_gnome()) for _ in range(POPULATION_SIZE)]

def select_parents(population):
    '''
    Select parents using tournament selection
    '''
    return random.sample(population[:50], 2)

def genetic_algorithm():
    generation = 1
    population = initialize_population()
    found = False

    while not found:
        population = sorted(population, key=lambda x: x.fitness)
        if population[0].fitness == 0:
            found = True
            break

        new_generation = population[:10]  # Elitism
        while len(new_generation) < POPULATION_SIZE:
            parent1, parent2 = select_parents(population)
            child = parent1.mate(parent2)
            if random.random() < 0.1:
                child.mutate()
            new_generation.append(child)
        
        population = new_generation
        
        print(f"Generation: {generation}\tString: {''.join(population[0].chromosome)}\tFitness: {population[0].fitness}")
        generation += 1

    print(f"Final Generation: {generation}\tString: {''.join(population[0].chromosome)}\tFitness: {population[0].fitness}")

if __name__ == '__main__':
    genetic_algorithm()
