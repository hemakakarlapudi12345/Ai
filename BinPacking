import random
import numpy as np
num_items = 10
bin_capacity = 15
population_size = 10
num_generations = 50
mutation_rate = 0.1
item_sizes = np.random.randint(1, 10, size=num_items)

def generate_population(size, num_items):
    return [random.sample(range(num_items), num_items) for _ in range(size)]


def fitness(chromosome):
    bins = []
    for item in chromosome:
        placed = False
        for bin in bins:
            if sum(bin) + item_sizes[item] <= bin_capacity:
                bin.append(item_sizes[item])
                placed = True
                break
        if not placed:
            bins.append([item_sizes[item]])
    return len(bins)  


def selection(population, fitness_scores):
    tournament = random.sample(list(zip(population, fitness_scores)), k=3)
    return min(tournament, key=lambda x: x[1])[0]

def crossover(parent1, parent2):
    point = random.randint(1, num_items - 1)
    child1 = parent1[:point] + parent2[point:]
    child2 = parent2[:point] + parent1[point:]
    return child1, child2


def mutate(chromosome):
    if random.random() < mutation_rate:
        idx1, idx2 = random.sample(range(num_items), 2)
        chromosome[idx1], chromosome[idx2] = chromosome[idx2], chromosome[idx1]
    return chromosome


population = generate_population(population_size, num_items)
for generation in range(num_generations):
    fitness_scores = [fitness(chromosome) for chromosome in population]
    new_population = []
    while len(new_population) < population_size:
        parent1 = selection(population, fitness_scores)
        parent2 = selection(population, fitness_scores)
        child1, child2 = crossover(parent1, parent2)
        new_population.extend([mutate(child1), mutate(child2)])
    population = new_population[:population_size]
    

best_chromosome = min(population, key=fitness)
best_fitness = fitness(best_chromosome)
print("Optimized Bin Packing Order:", best_chromosome)
print("Minimum Number of Bins Used:", best_fitness)
